import React, { useEffect, useMemo, useState } from 'react';
import api from '../api';
import { canApproveReservations, getUserRole } from '../utils/auth';

const formatDateTime = (value) => {
  if (!value) return '--';
  return new Date(value).toLocaleString();
};

const formatDate = (value) => {
  if (!value) return '--';
  return new Date(value).toLocaleDateString();
};

const ApprovalCard = ({
  reservation,
  onView,
  onApprove,
  onReject,
  actionLoading,
}) => {
  const space = reservation?.espacio_detalle;
  const requester = reservation?.usuario_detalle;
  const type = (space?.tipo || 'Espacio').toLowerCase();

  const typeTagClass = type.includes('labor')
    ? 'tag is-info'
    : type.includes('aula')
      ? 'tag'
      : 'tag is-warning';

  return (
    <div className="reservation-card">
      <div className="reservation-card__header">
        <div>
          <h3 className="reservation-card__heading">
            {space?.nombre || reservation.espacio || 'Espacio sin nombre'}
          </h3>
          <div className="reservation-card__meta">
            {space?.ubicacion_display || space?.ubicacion || 'Ubicacion sin definir'}
          </div>
        </div>
        <div className="d-flex flex-column align-items-end gap-2">
          <span className={typeTagClass}>{space?.tipo || 'Espacio'}</span>
          <button
            type="button"
            className="btn btn-link btn-sm text-decoration-none px-0"
            onClick={() => onView(reservation)}
          >
            Ver detalle
          </button>
        </div>
      </div>

      <div className="reservation-card__body">
        <div>
          <div className="text-muted text-uppercase small fw-semibold mb-1">Solicitante</div>
          <div className="fw-semibold">
            {requester?.nombre || 'Sin asignar'}
          </div>
          <div className="reservation-card__meta">
            {requester?.email || 'Sin correo'} | {requester?.rol || 'Rol no disponible'}
          </div>
        </div>

        <div className="reservation-card__timeline">
          <div className="d-flex justify-content-between">
            <span>Inicio</span>
            <span>{formatDateTime(reservation.fecha_inicio)}</span>
          </div>
          <div className="d-flex justify-content-between">
            <span>Fin</span>
            <span>{formatDateTime(reservation.fecha_fin)}</span>
          </div>
          <div className="d-flex justify-content-between">
            <span>Creada</span>
            <span>{formatDateTime(reservation.creado_en)}</span>
          </div>
        </div>

        <p className="text-muted small mb-0">
          {reservation.motivo || 'Sin motivo registrado.'}
        </p>
        <div className="d-flex flex-wrap gap-2 small">
          {reservation.cantidad_asistentes ? (
            <span className="badge bg-light text-success border">
              {reservation.cantidad_asistentes} asistentes
            </span>
          ) : null}
          {reservation.requiere_llaves ? (
            <span className="badge bg-light text-success border">Requiere llaves</span>
          ) : null}
          {reservation.recurrente ? (
            <span className="badge bg-light text-success border">
              Recurrente
            </span>
          ) : null}
        </div>
      </div>

      <div className="reservation-card__footer">
        <div className="d-flex flex-wrap gap-2 justify-content-end">
          <button
            type="button"
            className="btn btn-outline-danger btn-sm"
            disabled={actionLoading}
            onClick={() => onReject(reservation.id)}
          >
            Rechazar
          </button>
          <button
            type="button"
            className="btn btn-success btn-sm"
            disabled={actionLoading}
            onClick={() => onApprove(reservation.id)}
          >
            Aprobar
          </button>
        </div>
      </div>
    </div>
  );
};

const ReservationApprovals = () => {
  const [reservations, setReservations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [feedback, setFeedback] = useState('');
  const [actionLoading, setActionLoading] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [typeFilter, setTypeFilter] = useState('todos');

  const role = getUserRole();
  const canManage = canApproveReservations();

  useEffect(() => {
    if (!canManage) {
      setLoading(false);
      return;
    }

    const fetchReservations = async () => {
      setLoading(true);
      setError('');
      try {
        const response = await api.get('reservas/?estado=pendiente');
        setReservations(Array.isArray(response.data) ? response.data : []);
      } catch (err) {
        setError('No fue posible cargar las solicitudes pendientes.');
      } finally {
        setLoading(false);
      }
    };

    fetchReservations();
  }, [canManage]);

  const typeOptions = useMemo(() => {
    const types = new Set();
    reservations.forEach((item) => {
      const type = (item?.espacio_detalle?.tipo || '').toLowerCase();
      if (type) types.add(type);
    });
    return Array.from(types);
  }, [reservations]);

  const metrics = useMemo(() => {
    const total = reservations.length;
    const labs = reservations.filter(
      (item) => (item?.espacio_detalle?.tipo || '').toLowerCase() === 'laboratorio'
    ).length;
    const aulas = reservations.filter(
      (item) => (item?.espacio_detalle?.tipo || '').toLowerCase() === 'aula'
    ).length;
    return { total, labs, aulas, others: total - labs - aulas };
  }, [reservations]);

  const filteredReservations = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    return reservations.filter((reservation) => {
      const spaceName = reservation?.espacio_detalle?.nombre || '';
      const requester = reservation?.usuario_detalle?.nombre || '';
      const motive = reservation?.motivo || '';
      const type = (reservation?.espacio_detalle?.tipo || '').toLowerCase();

      const matchesSearch =
        !term ||
        [spaceName, requester, motive].some((value) =>
          value.toLowerCase().includes(term)
        );
      const matchesType = typeFilter === 'todos' || type === typeFilter;
      return matchesSearch && matchesType;
    });
  }, [reservations, searchTerm, typeFilter]);

  const applyAction = async (reservationId, action) => {
    setActionLoading(true);
    setFeedback('');
    setError('');
    try {
      let comentario = '';
      if (action === 'rechazar') {
        const userComment = window.prompt('Ingresa un comentario (opcional) para el solicitante:');
        if (userComment === null) {
          setActionLoading(false);
          return;
        }
        comentario = userComment;
      }
      const targetReservation = reservations.find((item) => item.id === reservationId);
      await api.post(`reservas/${reservationId}/${action}/`, { comentario });
      if (action === 'aprobar' && targetReservation) {
        const targetStart = new Date(targetReservation.fecha_inicio).getTime();
        const targetEnd = new Date(targetReservation.fecha_fin).getTime();
        setReservations((prev) =>
          prev.filter((item) => {
            if (item.id === reservationId) {
              return false;
            }
            if (String(item.espacio) !== String(targetReservation.espacio)) {
              return true;
            }
            const itemStart = new Date(item.fecha_inicio).getTime();
            const itemEnd = new Date(item.fecha_fin).getTime();
            const overlaps =
              Number.isFinite(itemStart) &&
              Number.isFinite(itemEnd) &&
              itemStart < targetEnd &&
              itemEnd > targetStart;
            return !overlaps;
          })
        );
      } else {
        setReservations((prev) => prev.filter((item) => item.id !== reservationId));
      }
      setFeedback(action === 'aprobar' ? 'Reserva aprobada correctamente.' : 'Reserva rechazada.');
      setSelectedReservation((prev) => (prev?.id === reservationId ? null : prev));
    } catch (err) {
      const serverMsg = err.response?.data;
      const readable =
        typeof serverMsg === 'string'
          ? serverMsg
          : serverMsg?.detail || 'No fue posible completar la accion.';
      setError(readable);
    } finally {
      setActionLoading(false);
    }
  };

  const closeDetail = () => setSelectedReservation(null);

  if (!canManage) {
    return (
      <div className="alert alert-info">
        Tu rol actual ({role || 'sin rol definido'}) no tiene permisos para aprobar o rechazar reservas.
      </div>
    );
  }

  if (loading) {
    return (
      <div className="text-center py-5">
        <div className="spinner-border text-success" role="status"></div>
        <p className="mt-3 text-muted">Cargando solicitudes pendientes...</p>
      </div>
    );
  }

  return (
    <div className="reservation-approvals container-xxl py-4">
      <div className="reservations-hero mb-4">
        <div className="d-flex flex-wrap justify-content-between align-items-start gap-3">
          <div>
            <p className="text-uppercase small mb-2">Panel de aprobaciones</p>
            <h1 className="mb-2">Gestiona solicitudes pendientes con rapidez</h1>
            <p className="mb-0">
              Revisa los detalles clave de cada reserva, comunica decisiones y mantente coordinado con los solicitantes.
            </p>
          </div>
        </div>
      </div>

      <div className="row g-3 mb-4">
        <div className="col-md-4">
          <div className="card-elevated h-100 p-4 bg-white d-flex flex-column gap-2">
            <span className="text-muted text-uppercase small">Pendientes</span>
            <span className="display-6 mb-1 text-success fw-semibold">{metrics.total}</span>
            <span className="small text-muted">
              Laboratorios: {metrics.labs} | Aulas: {metrics.aulas} | Otros: {metrics.others}
            </span>
          </div>
        </div>
        <div className="col-md-8">
          <div className="card-elevated h-100 p-4 bg-white">
            <div className="row g-3 align-items-center">
              <div className="col-lg-6">
                <label htmlFor="approvalSearch" className="form-label text-muted small text-uppercase mb-1">
                  Buscar
                </label>
                <input
                  id="approvalSearch"
                  type="search"
                  className="form-control"
                  placeholder="Espacio, solicitante o motivo"
                  value={searchTerm}
                  onChange={(event) => setSearchTerm(event.target.value)}
                />
              </div>
              <div className="col-lg-6">
                <span className="text-muted small text-uppercase d-block mb-1">Filtrar por tipo</span>
                <div className="d-flex flex-wrap gap-2">
                  <button
                    type="button"
                    className={`btn btn-sm btn-outline-success ${typeFilter === 'todos' ? 'active' : ''}`}
                    onClick={() => setTypeFilter('todos')}
                  >
                    Todos
                  </button>
                  {typeOptions.map((option) => (
                    <button
                      key={option}
                      type="button"
                      className={`btn btn-sm btn-outline-success ${typeFilter === option ? 'active' : ''}`}
                      onClick={() => setTypeFilter(option)}
                    >
                      {option.charAt(0).toUpperCase() + option.slice(1)}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {feedback && <div className="alert alert-success">{feedback}</div>}
      {error && <div className="alert alert-danger">{error}</div>}

      {reservations.length === 0 ? (
        <div className="alert alert-info">No hay solicitudes pendientes.</div>
      ) : filteredReservations.length === 0 ? (
        <div className="alert alert-light border">
          <h5 className="mb-1">No encontramos solicitudes con el filtro aplicado.</h5>
          <p className="text-muted small mb-0">Prueba ajustar la busqueda o cambiar el tipo de espacio.</p>
        </div>
      ) : (
        <div className="row g-4">
          {filteredReservations.map((reservation) => (
            <div key={reservation.id} className="col-xl-4 col-lg-6">
              <ApprovalCard
                reservation={reservation}
                onView={setSelectedReservation}
                onApprove={(id) => applyAction(id, 'aprobar')}
                onReject={(id) => applyAction(id, 'rechazar')}
                actionLoading={actionLoading}
              />
            </div>
          ))}
        </div>
      )}

      {selectedReservation && (
        <>
          <div className="modal show d-block" tabIndex="-1" role="dialog" aria-modal="true">
            <div className="modal-dialog modal-lg">
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title">Detalle de solicitud</h5>
                  <button type="button" className="btn-close" onClick={closeDetail} aria-label="Cerrar"></button>
                </div>
                <div className="modal-body">
                  <div className="row g-3">
                    <div className="col-md-6">
                      <h6 className="fw-semibold mb-1">Espacio</h6>
                      <p className="mb-0">
                        {selectedReservation.espacio_detalle?.nombre || 'Sin nombre'}
                      </p>
                      <p className="text-muted small mb-0">
                        ID {selectedReservation.espacio_detalle?.id || selectedReservation.espacio} | Tipo {selectedReservation.espacio_detalle?.tipo || 'N/D'}
                      </p>
                      <p className="text-muted small mb-0">
                        Ubicacion {selectedReservation.espacio_detalle?.ubicacion_display || selectedReservation.espacio_detalle?.ubicacion || 'Sin especificar'}
                      </p>
                    </div>
                    <div className="col-md-6">
                      <h6 className="fw-semibold mb-1">Solicitante</h6>
                      <p className="mb-0">{selectedReservation.usuario_detalle?.nombre || 'Sin asignar'}</p>
                      <p className="text-muted small mb-0">{selectedReservation.usuario_detalle?.email || 'Sin correo'}</p>
                      <p className="text-muted small mb-0">Rol {selectedReservation.usuario_detalle?.rol || 'No disponible'}</p>
                    </div>
                    <div className="col-md-6">
                      <h6 className="fw-semibold mb-1">Programacion</h6>
                      <p className="mb-0"><strong>Inicio:</strong> {formatDateTime(selectedReservation.fecha_inicio)}</p>
                      <p className="mb-0"><strong>Fin:</strong> {formatDateTime(selectedReservation.fecha_fin)}</p>
                      <p className="mb-0"><strong>Creada:</strong> {formatDateTime(selectedReservation.creado_en)}</p>
                      <p className="mb-0"><strong>Actualizada:</strong> {formatDateTime(selectedReservation.actualizado_en)}</p>
                    </div>
                    <div className="col-md-6">
                      <h6 className="fw-semibold mb-1">Detalles adicionales</h6>
                      <p className="mb-0"><strong>Asistentes:</strong> {selectedReservation.cantidad_asistentes ?? 'N/D'}</p>
                      <p className="mb-0"><strong>Llaves:</strong> {selectedReservation.requiere_llaves ? 'Si' : 'No'}</p>
                      <p className="mb-0">
                        <strong>Recurrente:</strong> {selectedReservation.recurrente ? 'Si' : 'No'}
                      </p>
                      {selectedReservation.recurrente && (
                        <p className="mb-0">
                          <strong>Semestre:</strong> {formatDate(selectedReservation.semestre_inicio)} - {formatDate(selectedReservation.semestre_fin)}
                        </p>
                      )}
                    </div>
                    <div className="col-12">
                      <h6 className="fw-semibold mb-1">Motivo</h6>
                      <p className="text-muted mb-0">{selectedReservation.motivo || 'Sin motivo suministrado.'}</p>
                    </div>
                    {selectedReservation.metadata?.recurrencia && (
                      <div className="col-12">
                        <h6 className="fw-semibold mb-1">Recurrencia</h6>
                        <div className="alert alert-light border mb-0 small">
                          {Object.entries(selectedReservation.metadata.recurrencia).map(([key, value]) => (
                            <div key={key}><strong>{key}:</strong> {String(value)}</div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
                <div className="modal-footer">
                  <div className="me-auto text-muted small">
                    Estado actual: {selectedReservation.estado_display || selectedReservation.estado}
                  </div>
                  <button type="button" className="btn btn-outline-secondary" onClick={closeDetail}>
                    Cerrar
                  </button>
                  <button
                    type="button"
                    className="btn btn-outline-danger"
                    disabled={actionLoading}
                    onClick={() => applyAction(selectedReservation.id, 'rechazar')}
                  >
                    Rechazar
                  </button>
                  <button
                    type="button"
                    className="btn btn-success"
                    disabled={actionLoading}
                    onClick={() => applyAction(selectedReservation.id, 'aprobar')}
                  >
                    Aprobar
                  </button>
                </div>
              </div>
            </div>
          </div>
          <div className="modal-backdrop fade show"></div>
        </>
      )}
    </div>
  );
};

export default ReservationApprovals;

